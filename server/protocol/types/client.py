from typing import Literal, TypedDict, Union

from typing_extensions import NotRequired


class AcceptPartyInvite(TypedDict):
    """Accept a party invite."""
    command: Literal["accept_party_invite"]

    sender_id: int
    """ID of the player who sent the invite."""


class Admin(TypedDict):
    """Perform a special administrative action.

    Requires appropriate priviledges.
    """
    command: Literal["admin"]

    action: Literal["broadcast", "closeFA", "closelobby", "join_channel"]
    """The action to perform."""
    user_id: int
    """The target player to perform the action on.

    Only applies to `closeFA` and `closelobby` actions.
    """
    user_ids: list[int]
    """The target players to perform the action on.

    Only applies to `join_channel`.
    """
    channel: str
    """The chat channel to join.

    Only applies to `join_channel`.
    """
    message: str
    """Message text to send. Can contain certain HTML styling tags.

    Only applies to `broadcast`.
    """


class AskSession(TypedDict):
    """Request session ID information needed by the faf-uid binary."""
    command: Literal["ask_session"]

    user_agent: NotRequired[str]
    """An identifier unique to the client software."""
    version: NotRequired[str]
    """A version number associated with the client software.

    Typically a sequence of numbers separated by dots.
    """


class Auth(TypedDict):
    """Log in using an OAuth token."""

    command: Literal["auth"]

    token: str
    """JWT token returned by the API."""
    unique_id: str
    """String generated by the faf-uid binary."""


class Avatar(TypedDict):
    """Manage player avatars."""
    command: Literal["avatar"]

    action: Literal["list_avatar", "select"]
    """The action to perform."""
    avatar_url: NotRequired[str]
    """The URL of the avatar to select.

    Only applies to `select`.
    """


class CoopList(TypedDict):
    """Request a list of available coop missions."""
    command: Literal["coop_list"]


class GameHost(TypedDict):
    """Request to host a custom or coop game."""
    command: Literal["game_host"]

    visibility: Literal["public", "friends"]
    """Controls which players can see the game in the lobby list."""
    title: NotRequired[str]
    """Lobby title.

    Can be changed once in lobby.
    """
    mod: NotRequired[str]
    """Featured mod to use."""
    mapname: NotRequired[str]
    """Map to use.

    Can be changed once in lobby.
    """
    password: NotRequired[str]
    """If set, anyone joining the game will need to enter this value."""
    enforce_rating_range: NotRequired[bool]
    """Whether or not to hide the game from players who do not meet the min/max
    rating requirements.
    """
    rating_min: NotRequired[float]
    """Minimum (displayed) global rating requirement."""
    rating_max: NotRequired[float]
    """Maximum (displayed) global rating requirement."""


class GameJoin(TypedDict):
    """Request to join a custom game."""
    command: Literal["game_join"]

    uid: int
    """ID of the game to join."""
    password: NotRequired[str]
    """Optional password if joining a password protected game."""


class GameMatchmaking(TypedDict):
    """Request to join a matchmaker queue."""
    command: Literal["game_matchmaking"]

    queue_name: str
    """Technical name of the queue to join."""
    state: Literal["start", "stop"]
    """Whether to start or stop searching."""
    mod: NotRequired[str]
    """Technical name of the queue to join.

    DEPRECATED: Use `queue_name` instead.
    """
    faction: NotRequired[str]
    """Which faction to use when the game starts.

    DEPRECATED: Use party to set faction instead.
    """


class Hello(TypedDict):
    """Log in using a username and password.

    DEPRECATED: Use Auth instead.
    """

    command: Literal["hello"]

    login: str
    """Player username."""
    password: str
    """SHA256 hash of the player's password"""
    unique_id: str
    """String generated by the faf-uid binary."""


class IceServers(TypedDict):
    """Request a list of available ICE server credentials."""
    command: Literal["ice_servers"]


class InviteToParty(TypedDict):
    """Request to send a party invite to a player."""
    command: Literal["invite_to_party"]

    recipient_id: int
    """ID of the player to invite."""


class KickPlayerFromParty(TypedDict):
    """Request to kick a player from your party."""
    command: Literal["kick_player_from_party"]

    kicked_player_id: int
    """ID of the player to kick."""


class LeaveParty(TypedDict):
    """Request to leave your current party."""
    command: Literal["leave_party"]


class MatchReady(TypedDict):
    """Signal that the player has accepted their matchmaker game."""
    command: Literal["match_ready"]


class MatchmakerInfo(TypedDict):
    command: Literal["matchmaker_info"]


class ModVault(TypedDict):
    """
    DEPRECATED: This command will be removed in the future. Use the FAF API
    instead.
    """
    type: Literal["start", "like", "download"]
    uid: NotRequired[int]


class Ping(TypedDict):
    """Request a pong message."""
    command: Literal["ping"]


class Pong(TypedDict):
    """Response to a ping message."""
    command: Literal["pong"]


class RestoreGameSession(TypedDict):
    """Reconnect to a game after being disconnected from the lobby server.

    This only works to restore GPGNet functionality so long as the connection
    to other players was never lost. Reconnection to other players is handled
    by the ICE adapter.
    """

    command: Literal["restore_game_session"]

    game_id: int
    """The ID of the game to reconnect to."""


class SetPartyFactions(TypedDict):
    """Set list of faction choices to use during matchmaker games."""
    command: Literal["set_party_factions"]

    factions: list[Union[str, int]]
    """List of faction choices.

    Factions can be sent either using their string values (`aeon`, `uef`,
    `cybran`, `seraphim`), or by sending their integer codes. Duplicates will be
    ignored. The list must contain at least one valid choice.

    DEPRECATED: Sending factions as integers. Send strings instead.
    """


class SocialAdd(TypedDict):
    """Add a player to the friend list or foe list.

    Exactly one of the `friend` or `foe` fields should be supplied.
    """
    command: Literal["social_add"]

    friend: NotRequired[int]
    """If present, indicate the player ID of the player to add as a friend"""
    foe: NotRequired[int]
    """If present, indicate the player ID of the player to add as a foe"""


class SocialRemove(TypedDict):
    """Remove a player from the friend list or foe list.

    Exactly one of the `friend` or `foe` fields should be supplied.
    """
    command: Literal["social_remove"]

    friend: NotRequired[int]
    """If present, indicate the player ID of the player to remove from the
    friend list."""
    foe: NotRequired[int]
    """If present, indicate the player ID of the player to remove from the
    foe list."""
